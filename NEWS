    - fix: able to read from a BP file when the index itself is > 2GB
    - fix: bpmeta works correctly with index size > 2GB

1.11.0 Release November 2016
    - Time aggregation (temporal aggregation of an output in memory)
      see adios_set_time_aggregation() or the <time-aggregation> element in the XML syntax.
    - ZFP lossy compression transform method
    - Python wrapper includes functions for:
        - Selecting transforms and time aggregation: adios_set_transform()
        - Time aggregation: adios_set_time_aggregation()
        - Set maximum buffer size used by any ADIOS group: adios_set_max_buffer_size()
    - Collect min/max statistics only by default
      adios_declare_group() last argument type changed to be an option for statistics. 
      Options are: adios_stat_no, adios_stat_minmax, adios_stat_full, and adios_stat_default, which is minmax
    - Added functions to C API to detect available methods in the ADIOS installation
        adios.h: adios_available_write_methods()
        adios_read.h: adios_available_read_methods()
        adios_transform_methods.h: adios_available_transform_methods()
        adios_query.h: adios_available_query_methods()
    - Performance bug in MPI_AGGREGATE method in 1.9/1.10 fixed 
    - fix: bug building with hdf5 1.10

1.10.0 Release July 2016
    - Updated Query API and Minmax, FastBit and Alacrity query methods
    - Fortran API for inquiring selections
    - ADIOS builds without first installing Mini-XML separately
    - bprecover utility
      - recover a BP file which has a damaged index data
    - adios_group_size() optional now
    - --without-mpi option in configure to build only the sequential libraries
    - Python/Numpy wrapper improvements:
      - Support both python 2 and python 3
      - Read options with point and block selection 
      - Group management on reading
      - Support auto completion with ipython
    - fix: bpmeta does not skip any subfiles when used with threads
    - fix: Better xml processing to allow for multiple text lines as parameters for a method
    - fix: Builds on OS X, both clang and gcc supported
    - fix: support adios_inq_var_stat() in streaming mode

1.9.0 Release Jul 2015
    - Array attributes are supported
      - e.g axes = {"X","Y","Z"}
    - adios_define_attribute_byvalue()
      - to define scalar attributes with program variables instead of string values
    - Update mode when appending to a file
      - to add variables to last timestep instead of a new one 
    - Python/Numpy wrapper improvements:
      - Numpy-style array notations
        e.g, var[1:5, 2:10], var[1:5. :], var[:5,...]
      - Support for ADIOS write APIs
      - Hint/docstring support
      - Support for pip install and update
    - Added adios_version.h to provide release and file format versions
    - fix: memory leak in POSIX method
    - fix: adios_write() now accepts const * void data from C++ apps
    - fix: Cray compiler support
    - fix: reading of compressed, zero size arrays on some processes
    - fix: scaling bugs in aggregate method writing > 2GB per process or
           aggregating data into a file over 4GB


1.8.0 Release Dec 2014
    - Query API 
      - extends the read API with queries
    - Staging over WAN (wide-area-network)
      - ICEE method (requires FLEXPATH) 
    - skeldump utility
      - to generate info and code from output data to replay 
        the I/O pattern
    - bpmeta utility
      - generates metadata file (.bp) separately after writing the 
        data using MPI_AGGREGATE method with metadata writing turned off
    - I/O timing statistics and timing events can be collected
    - New stage writer code for staged I/O, where output data 
      (list of variables and their sizes) is changing 
      at every timestep. See examples/stage_write_varying
    - fix: staging with multiple streams allowed
    - fix: parallel build (make -j <n>) completes without breaking 
        

1.7.0 Release June 2014
    - Support for more than 64k variables in a file 
    - File system topology aware I/O method for Titan@OLCF
    - DataSpaces staging 
      - support for 64bit dimension sizes 
      - support for more than three dimensions
      - works on Bluegene/Q (DataSpaces+DIMES methods)
      - can run as a service (dynamic connections)
    - Additions to non-XML Write API: 
      - Support for the visualization schema
      - adios_set_transform() to choose the transformation
        for a variable
    - Usability improvements:
      - CMake Module for find_package(ADIOS)
      - adios_config -m to print available write/read methods


1.6.0 Release Dec 2013
    - Transformations of data supported in file-based I/O
      - lossless compression (zlib, bzip, szip)
      - lossless compression (ISOBAR)
      - precision-level-of-detail encoding (APLOD)
    - Changes to Write API:
      - variables are identified by full path at writing
      - fix: all int functions return 0 as OK and !=0 on error
    - Changes to Read API:
      - Read API extensions to get information about the 
        visualization meshes defined in a file
      - leading / in path names is not enforced
    - New I/O method for Bluegene/Q called "BGQ"
        configure with the option --with-bgq
    - Removed performance bottleneck in metadata operations when 
      writing/reading thousands of variables. 
    - fix: one can build ADIOS separately from the source with automake


1.5.0 Release June 2013
    - Changes to Write API: 
      - adios_init() and adios_init_noxml() has MPI_Comm argument
      - adios_open() has MPI_comm argument instead of void * argument
    - Changes to Read API:
      - adios_read_open_stream() obsolete and now it's called
        adios_read_open() indicating that it's used for both
        files and staged data.
    - New staging methods:
      - DIMES
      - FLEXPATH
    - CMAKE build files (besides Automake files)
    - New write method VAR_MERGE for spatial aggregation of 
      small per-process-output into larger chunks. It improves both
      write and read performance for such applications. 
    - fix: segfault in adios_inq_var_blockinfo()
    - fix: endianness independence (
    - fix: in adios_inq_var_stat() for getting statistics (avg, std.dev)
    - fix: backward compatibility in reading old BP files containing 
           scalars over time (a 1D array)

1.4.1 Release Dec 2012
    - aggregated file reader method (from 1.3.1): 
      use ADIOS_READ_METHOD_BP_AGGREGATE
    - memory limitation specified by user for chunked reading 
      now taken into account in file reading
    - stage writer example code for staged I/O
      see examples/stage_write
    - code coupling example code for file-based/staged coupling
      see examples/coupling
    - bp2h5 supports converting complex and double complex types
    - new adios_write_byid() function to write multiple-blocks of
      the same global array from a process
    - fix: F90 modules: adios_write, adios_schedule_read
    - fix: invalid "out of bound" errors when reading multiple steps 
           of multi-dimensional arrays
    - fix: double-free bug in support of old read API in Fortran
    - fix: backward compatibility of old read API to read multi-group 
           files (fixed "invalid variable id..." errors)

1.4.0 Release July 2012
    - new read API for staging method with step-by-step processing, 
       also with non-blocking and chunking APIs
    - visualization schema added to ADIOS XML format
    - skel: I/O skeleton generator and evaluation tools
    - unified error/debug logging
    - attributes written from only 1 processor to save on metadata
    - ADIOS version identifier in ADIOS-BP format
    - extra hidden attributes (version, create/update times) 
    - Java and Python bindings
    - F90 modules adios_write_mod and adios_read_mod 
          to check syntax at compile time


1.3.1 Released Nov 2011
    - fix: non-compliant MPI collective calls
    - fix: MPI_AMR method caused MPI_Finalize issues on some clusters
    - fix: histogram calculation: freeing memory too early

1.3 Released July 12, 2011
    - New read method BP_STAGED for reading files with improved performance
    - Changes in MPI_AMR and MPI_LUSTRE to support default parameters. 
      Parameters for MPI_LUSTRE and MPI_AMR in XML file are not mandatory 
      any more.

1.2.1 Released Aug 25, 2010
    - Bug fix in read API (arrays written every timestep but without time 
      dimension caused aborts)
    - DIMES method from Rutgers

1.2 Released July 15, 2010
    - XML and non-XML write APIs are available
    - More statistics (min/max/avg/std.dev) available without
      overhead in write performance
    - Added MPI_AMR method for advanced mesh refinement codes and
      for aggregated writing (N procs to P writers to M disks)
    - Added support for subfiles
      - POSIX method many-file output can be read as one file
      - MPI_AMR method uses subfiles to improve write performance
    - Added NetCDF-4 transport method
    - Asynchronous, staging methods on Jaguar XT5 at ORNL
      - DataTap from Georgia Tech
      - DataSpaces from Rutgers
      - NSSI from Sandia
    - MPI_LUSTRE method for best performance on Lustre file system


1.0.1  Released on Dec 9, 2009
    - fix: builds read API on Mac (was broken at utils/bpdump)
    - fix: Fortran written BP files are correctly read by Fortran readers
    - added adios_mpi_stripe2 method for improved performance on Lustre 
      file system

1.0  Released on Nov 18, 2009
